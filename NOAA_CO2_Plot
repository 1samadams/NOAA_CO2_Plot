# Libraries
# pip install pandas plotly requests

# -----------------------------------------------------------------------
# Create an interactive CO2 visualization with options to switch between different time scales
# Fetches data from NOAA FTP servers
# -----------------------------------------------------------------------


import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import requests

# Define the URL for the daily CO2 data
url = "https://gml.noaa.gov/aftp/data/trace_gases/co2/in-situ/surface/txt/co2_mlo_surface-insitu_1_ccgg_DailyData.txt"

# Fetch the data
response = requests.get(url)
data_lines = response.text.splitlines()

# Parse the data
parsed_data = []
for line in data_lines[57:]:
    parts = line.split()
    if len(parts) == 9:
        year, month, day, hour, decimal_date, co2, interpolated, trend, number_of_days = parts
        parsed_data.append([int(year), int(month), int(day), float(decimal_date), float(co2)])

# Create a DataFrame
columns = ['year', 'month', 'day', 'decimal_date', 'co2']
data = pd.DataFrame(parsed_data, columns=columns)

# Convert year, month, day to a datetime object
data['date'] = pd.to_datetime(data[['year', 'month', 'day']])

# Create an interactive plot with plotly
fig = make_subplots(specs=[[{"secondary_y": True}]])

# Daily data
fig.add_trace(
    go.Scatter(x=data['date'], y=data['co2'], name="Daily CO2", mode='lines'),
    secondary_y=False,
)

# Update layout for interactive features
fig.update_layout(
    title_text="Daily CO2 Levels at Mauna Loa",
    xaxis_title="Date",
    yaxis_title="CO2 (ppm)",
    hovermode='x unified'
)

# Add range sliders and selectors
fig.update_xaxes(
    rangeslider_visible=True,
    rangeselector=dict(
        buttons=list([
            dict(count=1, label="1m", step="month", stepmode="backward"),
            dict(count=6, label="6m", step="month", stepmode="backward"),
            dict(count=1, label="YTD", step="year", stepmode="todate"),
            dict(count=1, label="1y", step="year", stepmode="backward"),
            dict(step="all")
        ])
    )
)

fig.show()
