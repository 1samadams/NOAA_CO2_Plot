# Libraries
# pip install requests pandas matplotlib

# -----------------------------------------------------------------------
# Create an interactive CO2 visualization with options to switch between different time scales
# Fetches data from NOAA FTP servers
# -----------------------------------------------------------------------

import requests
import pandas as pd
import matplotlib.pyplot as plt
from matplotlib.widgets import RadioButtons

# Function to fetch the data
def fetch_data(url):
    try:
        response = requests.get(url)
        response.raise_for_status()  # Raise an exception for HTTP errors
        return response.text
    except requests.exceptions.RequestException as e:
        print(f"Error fetching data: {e}")
        return None

# Function to parse the data
def parse_data(data):
    lines = data.splitlines()
    header = lines[0].split()
    df = pd.DataFrame([line.split() for line in lines[1:]], columns=header)

    # Convert columns to appropriate data types
    df['year'] = df['year'].astype(int)
    df['month'] = df['month'].astype(int)
    df['day'] = df['day'].astype(int)
    df['hour'] = df['hour'].astype(int)
    df['minute'] = df['minute'].astype(int)
    df['second'] = df['second'].astype(int)
    df['value'] = df['value'].astype(float)

    # Create a datetime column
    df['datetime'] = pd.to_datetime(df[['year', 'month', 'day', 'hour', 'minute', 'second']])
    df.set_index('datetime', inplace=True)
    
    return df

# Function to resample the data
def resample_data(df):
    df_hourly = df['value'].resample('H').mean()
    df_daily = df['value'].resample('D').mean()
    df_monthly = df['value'].resample('M').mean()
    df_yearly = df['value'].resample('Y').mean()
    return df_hourly, df_daily, df_monthly, df_yearly

# Function to create the visualization
def create_visualization(df_hourly, df_daily, df_monthly, df_yearly):
    fig, ax = plt.subplots()
    plt.subplots_adjust(left=0.3)

    # Plot the default view (daily data)
    line, = ax.plot(df_daily.index, df_daily.values, label='Daily Data')

    # Create a function to update the plot
    def update_plot(label):
        ax.clear()
        if label == 'Hourly':
            ax.plot(df_hourly.index, df_hourly.values, label='Hourly Data')
        elif label == 'Daily':
            ax.plot(df_daily.index, df_daily.values, label='Daily Data')
        elif label == 'Monthly':
            ax.plot(df_monthly.index, df_monthly.values, label='Monthly Data')
        elif label == 'Yearly':
            ax.plot(df_yearly.index, df_yearly.values, label='Yearly Data')
        ax.legend()
        fig.canvas.draw_idle()

    # Add radio buttons for selecting the time scale
    ax_radio = plt.axes([0.05, 0.4, 0.2, 0.2], facecolor='lightgoldenrodyellow')
    radio = RadioButtons(ax_radio, ('Hourly', 'Daily', 'Monthly', 'Yearly'))
    radio.on_clicked(update_plot)

    # Show the plot
    plt.show()

# Main function
def main():
    url = "https://gml.noaa.gov/aftp/data/trace_gases/co2/in-situ/surface/txt/co2_mlo_surface-insitu_1_ccgg_DailyData.txt"
    data = fetch_data(url)
    if data is None:
        return

    df = parse_data(data)
    df_hourly, df_daily, df_monthly, df_yearly = resample_data(df)
    create_visualization(df_hourly, df_daily, df_monthly, df_yearly)

if __name__ == "__main__":
    main()
